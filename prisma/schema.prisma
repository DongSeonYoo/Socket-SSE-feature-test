generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  idx                                          Int            @id @default(autoincrement())
  email                                        String         @db.VarChar
  password                                     String         @db.Char(60)
  name                                         String         @db.VarChar
  createdAt                                    DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                    DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt                                    DateTime?      @map("deleted_at") @db.Timestamptz(6)
  comment                                      Comment[]
  notification_notification_sender_idxTouser   Notification[] @relation("notification_sender_idxTouser")
  notification_notification_receiver_idxTouser Notification[] @relation("notification_receiver_idxTouser")
  post                                         Post[]
  reply                                        reply[]

  @@unique([email, deletedAt], map: "unique_email_deleted_at")
  @@map("user")
}

model Post {
  idx       Int         @id @default(autoincrement())
  authorIdx Int         @map("author_idx")
  title     String      @db.VarChar
  content   String
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime?   @map("deleted_at") @db.Timestamptz(6)
  Comment   Comment[]
  User      User        @relation(fields: [authorIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_to_post")
  PostImage PostImage[]

  @@map("post")
}

model Comment {
  idx       Int       @id @default(autoincrement())
  postIdx   Int       @map("post_idx")
  authorIdx Int       @map("author_idx")
  content   String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  Post      Post      @relation(fields: [postIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_to_comment")
  User      User      @relation(fields: [authorIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_to_comment")
  reply     reply[]

  @@map("comment")
}

model PostImage {
  idx     Int    @id @default(autoincrement())
  postIdx Int    @map("post_idx")
  path    String
  Post    Post   @relation(fields: [postIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_to_post_image")

  @@map("post_image")
}

model Notification {
  idx                                  Int       @id @default(autoincrement())
  senderIdx                            Int       @map("sender_idx")
  receiverIdx                          Int       @map("receiver_idx")
  entityType                           NotificationName
  entityIdx                            Int       @map("entity_idx")
  readedAt                             DateTime? @db.Timestamptz(6) @map("readed_at")
  deletedAt                            DateTime? @map("deleted_at") @db.Timestamptz(6)
  updatedAt                            DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdAt                            DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  user_notification_sender_idxTouser   User      @relation("notification_sender_idxTouser", fields: [senderIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_to_notification")
  user_notification_receiver_idxTouser User      @relation("notification_receiver_idxTouser", fields: [receiverIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_to_notification1")

  @@map("notification")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reply {
  idx         Int       @id @default(autoincrement())
  commentIdx  Int       @map("comment_idx")
  authorIdx   Int       @map("author_idx")
  content     String
  deletedAt  DateTime? @db.Timestamptz(6) @map("deleted_at")
  updatedAt  DateTime  @default(now()) @db.Timestamptz(6) @map("updated_at")
  createdAt  DateTime  @default(now()) @db.Timestamptz(6) @map("created_at")
  comment     Comment   @relation(fields: [commentIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_comment_to_reply")
  user        User      @relation(fields: [authorIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_to_reply")
}

enum NotificationName {
  POST
  COMMENT
  REPLY
}
